@base object/intangible/base/intangible_base.iff

@class token_object_template 0

@class intangible_object_template 0

// enum type IngredientType:
//     IT_none		(no item (for empty/unused slots))
//     IT_item		(a specific item (Skywalker barrel mark V))
//     IT_template		(any item created from a template (any small_blaster_barrel))
//     IT_resourceType		(a specific resource type (iron type 5))
//     IT_resourceClass		(any resource of a resource class (ferrous metal))

// struct Ingredient:
//     ingredientType		// enum type IngredientType
//     ingredients		// list, of type struct SimpleIngredient
//     complexity		// floating point
//     skillCommand		// string

// struct SchematicAttribute:
//     name		// string id
//     value		// integer

// struct SimpleIngredient:
//     name		// string id
//     ingredient		// string
//     count		// integer



@class object_template 5

// enum type Attributes:
//     AT_health
//     AT_strength
//     AT_constitution
//     AT_action
//     AT_quickness
//     AT_stamina
//     AT_mind
//     AT_focus
//     AT_willpower

// enum type CraftingType:
//     CT_weapon
//     CT_armor
//     CT_food
//     CT_clothing
//     CT_vehicle
//     CT_droid
//     CT_chemical
//     CT_plantBreeding
//     CT_animalBreeding
//     CT_furniture
//     CT_installation
//     CT_lightsaber

// enum type DeleteFlags:
//     DF_gm
//     DF_player

// enum type MentalStates:
//     MS_fear
//     MS_anger
//     MS_interest
//     MS_distress

// enum type MoveFlags:
//     MF_gm
//     MF_player

// enum type UpdateRanges:
//     UR_near
//     UR_normal
//     UR_far

// enum type VisibleFlags:
//     VF_gm
//     VF_player

// enum type XpTypes:
//     XP_rangedCombat
//     XP_meleeCombat
//     XP_tamingNoTime
//     XP_tamingShortTime
//     XP_tamingMediumTime
//     XP_tamingLargeTime
//     XP_architect
//     XP_botany
//     XP_bountyHunter
//     XP_chemist
//     XP_dancing
//     XP_facilityManagementSavings
//     XP_facilityManagementWearAndTear
//     XP_farmer
//     XP_squadLeaderNoTime
//     XP_squadLeaderSmallTime
//     XP_squadLeaderMediumTime
//     XP_squadLeaderLargeTime
//     XP_hairdressing
//     XP_holonetSlicingPopularity
//     XP_holonetSlicingQuantity
//     XP_investigation
//     XP_medic
//     XP_military
//     XP_mining
//     XP_miningSavings
//     XP_musician
//     XP_musicanPopularity
//     XP_politics
//     XP_slicing
//     XP_smuggling
//     XP_surveyingNoMinimum
//     XP_surveyingLowMinimum
//     XP_surveyingMediumMinimum
//     XP_surveyingHighMinimum
//     XP_survivalHealing
//     XP_survivalTracking
//     XP_tailoring
//     XP_vehicularControl
//     XP_vehicularWearAndTear
//     XP_cooking
//     XP_weaponCrafting
//     XP_armorCrafting
//     XP_vehicleCrafting
//     XP_facilityCrafting
//     XP_droidCrafting

// struct AttribMod:
//     target		// enum type Attributes
//     value		// integer
//     time		// floating point
//     timeAtValue		// floating point
//     decay		// floating point

// struct Contents:
//     slotName		// string
//     equipObject		// boolean
//     content		// template type tangible_object_template

// struct MentalStateMod:
//     target		// enum type MentalStates
//     value		// floating point
//     time		// floating point
//     timeAtValue		// floating point
//     decay		// floating point

// struct Xp:
//     type		// enum type XpTypes
//     level		// integer
//     value		// integer

// filename
sharedTemplate = "object/token/shared_token.iff"
// list, of type string
scripts = [  ]
// objvar list
objvars = []
// integer
volume = 0
// list, of type enum type VisibleFlags
visibleFlags = [  ]
// list, of type enum type DeleteFlags
deleteFlags = [  ]
// boolean
invulnerable = false
// boolean

// floating point
//decay = 0
// floating point

// floating point
complexity = 0.0
// integer
tintIndex = 0
// array, indexed by enum type UpdateRanges, of type floating point
updateRanges[UR_near] = 0.0
updateRanges[UR_normal] = 0.0
updateRanges[UR_far] = 0.0
// list, of type struct Contents
contents = [  ]
// list, of type struct Xp
xpPoints = [  ]
